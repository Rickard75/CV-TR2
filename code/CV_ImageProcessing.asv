%% FIRST TRIAL

function close_all_figures()
    figs = findall(0, 'Type', 'figure');
    
    if isempty(figs)
        disp("ℹ️ No open windows to open.");
        return;
    end

    prompt = "Do you want to close all graphic windows? [y/n]: ";
    user_input = lower(strtrim(input(prompt, 's')));

    switch user_input
        case {'s', 'si', 'sì', 'y', 'yes'}
            close(figs);
            disp("✅ Graphic windows closed.");
        otherwise
            disp("❎ Operation failed. No windows closed.");
    end
end

% Loading image
path_folder = "CV@TR2/test_images/apples_images/"; 
img_id = input("Insert image id: ");
filename = "Image_" + img_id + ".tiff";
fullname = path_folder + filename;
fprintf('Analyzing file %s ...\n', fullname);

% Simple display
figure;
img_raw = imread(fullname);
imshow(img_raw,[]);
title("A simple apple")

% Process matrix data
img_mat = mat2gray(img_raw); % sets values in range [0:1]
img_adj = imadjust(img_raw); % adjust contrast

figure;
imhist(img_adj)
title("Adjusted histogram")

figure;
imshowpair(img_raw, img_adj, "montage");
title("Before and after adjustment")

figure;
imshow(apple77_clear);
title("Segmented image of apple 77")
close_all_figures();

%% AUTOMATIC SEGMENTATION for 1 image

% Loading image
path_folder = "CV@TR2/test_images/apples_images/"; 
img_id = input("Insert image id: ");
filename = "Image_" + img_id + ".tiff";
fullname = path_folder + filename;
fprintf('Analyzing file %s ...\n', fullname);

threshold_value = 800;

% ==== 1. Lettura immagine ====
img_raw = imread(fullname);

% ==== 2. Segmentazione ====
img_bin = img_raw > threshold_value;

% ==== 3. Rimozione oggetti al bordo ====
img_bin_clean = imclearborder(img_bin);

% ==== 4. Applica la maschera mantenendo le intensità originali ====
img_masked = img_raw;               % copia
img_masked(~img_bin_clean) = 0; % metti a 0 fuori dalla maschera

% ==== 5. Adatta il contrasto ====
img_adj = imadjust(img_masked);

% ==== 6. Visualizza ====
figure;
imshow(img_adj, []);
title("Masked and contrast-adjusted image");

% ==== 7. Crea cartella di output ====
output_folder = 'CV@TR2/test_images/apples_images_clear/';
if ~exist(output_folder, 'dir')
    mkdir(output_folder);
end

% ==== 8. Salva l’immagine mascherata ====
[~, name, ext] = fileparts(filename);
output_name = fullfile(output_folder, name + "_clear" + ext);
imwrite(img_adj, output_name);

fprintf("Immagine salvata in: %s\n", output_name);

close_all_figures();

%% AUTOMATIC SEGMENTATION for MULTIPLE IMAGES

function segmenta_batch_apples(input_folder, output_folder, threshold_value)

    % Create output folder
    if ~exist(output_folder, 'dir')
        mkdir(output_folder);
    end

    % Tiff files list
    files = dir(fullfile(input_folder, '*.tiff'));

    fprintf('Found %d images. Start segmentation...\n', length(files));

    for k = 1:length(files)
        filename = files(k).name;
        fullname = fullfile(input_folder, filename);
        
        % segmentation
        img = imread(fullname);
        img_bin = img > threshold_value;
        img_bin_clean = imclearborder(img_bin);
        
        % visualization
        img_masked = img;
        img_masked(~img_bin_clean) = 0;
        img_adj = imadjust(img_masked);

        % save
        [~, name, ext] = fileparts(filename);
        output_name = fullfile(output_folder, name + "_clear" + ext);
        imwrite(img_adj, output_name);

        fprintf('Sav: %s\n', output_name);
    end

    fprintf('Segmentazione completata per tutte le immagini.\n');
end
